# 1番上の階層。今から定義をする
services:
  # 2番目の階層。作りたいコンテナを定義する
  php-app:
  # 3番目の階層。中身を定義する
    # 作りたいコンテナの名前
    container_name: run-php-app
    # ビルドするDockerfileの場所
    build: ./app
    # 作りたいコンテナの中で使うポート番号
    ports:
      - "18080:80"
    # ローカルPCとコンテアン間でディレクトリをバインド(同期)する
    volumes:
      - ./app/src:/var/www/html/
    # 利用するネットワーク
    networks:
      - php-mysql-networks
    # 指定したサービスの後にコンテナを起動する(まずDBが立ち上がってないといけない)
    depends_on:
      - php-db
  php-db:
    image: mysql:8.0
    container_name: run-php-db
    ports:
      - "3307:3306"
    # コンテナの環境変数を指定できる
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=test
      - MYSQL_PASSWORD=test
      - MYSQL_DATABASE=test_db
      # root でアクセスする場合
      # - MYSQL_ROOT_PASSWORD=root
      # - MYSQL_USER=test
      # - MYSQL_PASSWORD=test
      # - MYSQL_DATABASE=test_db
    # 永続化させるためにローカルPCとコンテナをバインドする(DB設定の際は必ず設定する)
    volumes:
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql
    networks:
      - php-mysql-networks
    # DBをUIで確認できるようにする
  php-adminer:
    container_name: adminer
    image: adminer:4.8.1
    ports:
      - "8081:8080"
    networks:
      - php-mysql-networks
    depends_on:
      - php-db
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    # rootユーザーでログインするための設定
    environment:
      PMA_HOST: run-php-db
      PMA_USER: root
      PMA_PASSWORD: root
    ports:
      - "8082:80"
    networks:
      - php-mysql-networks
    depends_on:
      - php-db

# dockerで勝手にvolumeを作成してくれる
volumes:
  mysql-data:

# ネットワークを作成する
networks:
  php-mysql-networks: